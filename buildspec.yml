version: 0.2

phases:
  install:
    commands:
      - echo Installing pip
      - curl -O https://bootstrap.pypa.io/get-pip.py
      - python3 get-pip.py
      - echo Installing AWS CLI using pip
      - pip install awscli
      - echo AWS CLI installed successfully
      - echo Installing kubectl
      - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - echo kubectl installed successfully
  pre_build:
    commands:
      - echo Logging in to Amazon ECR
      - $(aws ecr get-login --no-include-email --region $AWS_REGION)
  build:
    commands:
      - echo Building the Docker image
      - TAG=$(date +'%Y%m%d-%H%M')
      - echo Building image with tag $TAG
      - docker build -t my-frontend ./front-end
      - docker tag my-frontend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test/frontend:$TAG
      - echo Pushing the Docker image
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test/frontend:$TAG
  post_build:
    commands:
      - echo Updating Kubernetes deployment
      - aws eks update-kubeconfig --name my-cluster --region $AWS_REGION
      - kubectl set image deployment/frontend frontend=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test/frontend:$TAG --namespace my-app
      - kubectl rollout status deployment/frontend --namespace my-app

artifacts:
  files:
    - '**/*'  # Specify files or directories to include in the artifacts
